{"service_name":"travis-ci","service_job_id":"10590021","git":{"branch":"(detached from fed8fa8)","head":{"id":"fed8fa8ac4e7a1020b7357e8689bc1fda13e3a92","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Fixed broken tests."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/lockbox-php.git"}]},"run_at":"2013-08-25 10:27:08 +0000","source_files":[{"name":"Eloquent\/Lockbox\/BoundCipher.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The standard Lockbox bi-directional cipher, with a bound key.\n *\/\nclass BoundCipher implements\n    BoundEncryptionCipherInterface,\n    BoundDecryptionCipherInterface\n{\n    \/**\n     * Construct a new bound bi-directional encryption cipher.\n     *\n     * @param Key\\PrivateKeyInterface        $privateKey       The key to use.\n     * @param EncryptionCipherInterface|null $encryptionCipher The encryption cipher to use.\n     * @param DecryptionCipherInterface|null $decryptionCipher The decryption cipher to use.\n     *\/\n    public function __construct(\n        Key\\PrivateKeyInterface $privateKey,\n        EncryptionCipherInterface $encryptionCipher = null,\n        DecryptionCipherInterface $decryptionCipher = null\n    ) {\n        if (null === $encryptionCipher) {\n            $encryptionCipher = new EncryptionCipher;\n        }\n        if (null === $decryptionCipher) {\n            $decryptionCipher = new DecryptionCipher;\n        }\n\n        $this->privateKey = $privateKey;\n        $this->publicKey = $privateKey->publicKey();\n        $this->encryptionCipher = $encryptionCipher;\n        $this->decryptionCipher = $decryptionCipher;\n    }\n\n    \/**\n     * Get the private key.\n     *\n     * @return Key\\PrivateKeyInterface The private key.\n     *\/\n    public function privateKey()\n    {\n        return $this->privateKey;\n    }\n\n    \/**\n     * Get the public key.\n     *\n     * @return Key\\PublicKeyInterface The public key.\n     *\/\n    public function publicKey()\n    {\n        return $this->publicKey;\n    }\n\n    \/**\n     * Get the encryption cipher.\n     *\n     * @return EncryptionCipherInterface The encryption cipher.\n     *\/\n    public function encryptionCipher()\n    {\n        return $this->encryptionCipher;\n    }\n\n    \/**\n     * Get the decryption cipher.\n     *\n     * @return DecryptionCipherInterface The decryption cipher.\n     *\/\n    public function decryptionCipher()\n    {\n        return $this->decryptionCipher;\n    }\n\n    \/**\n     * Encrypt a data packet.\n     *\n     * @param string $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    public function encrypt($data)\n    {\n        return $this->encryptionCipher()->encrypt($this->publicKey(), $data);\n    }\n\n    \/**\n     * Decrypt a data packet.\n     *\n     * @param string $data The data to decrypt.\n     *\n     * @return string                              The decrypted data.\n     * @throws Exception\\DecryptionFailedException If the decryption failed.\n     *\/\n    public function decrypt($data)\n    {\n        return $this->decryptionCipher()->decrypt($this->privateKey(), $data);\n    }\n\n    private $privateKey;\n    private $publicKey;\n    private $encryptionCipher;\n    private $decryptionCipher;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,1,1,5,1,1,null,5,5,5,5,5,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/BoundDecryptionCipher.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The standard Lockbox decryption cipher, with a bound key.\n *\/\nclass BoundDecryptionCipher implements BoundDecryptionCipherInterface\n{\n    \/**\n     * Construct a new bound decryption cipher.\n     *\n     * @param Key\\PrivateKeyInterface        $key    The key to use.\n     * @param DecryptionCipherInterface|null $cipher The cipher to use.\n     *\/\n    public function __construct(\n        Key\\PrivateKeyInterface $key,\n        DecryptionCipherInterface $cipher = null\n    ) {\n        if (null === $cipher) {\n            $cipher = new DecryptionCipher;\n        }\n\n        $this->key = $key;\n        $this->cipher = $cipher;\n    }\n\n    \/**\n     * Get the key.\n     *\n     * @return Key\\PrivateKeyInterface The key.\n     *\/\n    public function key()\n    {\n        return $this->key;\n    }\n\n    \/**\n     * Get the cipher.\n     *\n     * @return DecryptionCipherInterface The cipher;\n     *\/\n    public function cipher()\n    {\n        return $this->cipher;\n    }\n\n    \/**\n     * Decrypt a data packet.\n     *\n     * @param string $data The data to decrypt.\n     *\n     * @return string                              The decrypted data.\n     * @throws Exception\\DecryptionFailedException If the decryption failed.\n     *\/\n    public function decrypt($data)\n    {\n        return $this->cipher()->decrypt($this->key(), $data);\n    }\n\n    private $key;\n    private $cipher;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,2,2,null,6,6,6,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/BoundDecryptionCipherInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The interface implemented by ciphers that decrypt data and use a bound key.\n *\/\ninterface BoundDecryptionCipherInterface\n{\n    \/**\n     * Decrypt a data packet.\n     *\n     * @param string $data The data to decrypt.\n     *\n     * @return string                              The decrypted data.\n     * @throws Exception\\DecryptionFailedException If the decryption failed.\n     *\/\n    public function decrypt($data);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/BoundEncryptionCipher.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The standard Lockbox encryption cipher, with a bound key.\n *\/\nclass BoundEncryptionCipher implements BoundEncryptionCipherInterface\n{\n    \/**\n     * Construct a new bound encryption cipher.\n     *\n     * @param Key\\PublicKeyInterface         $key    The key to use.\n     * @param EncryptionCipherInterface|null $cipher The cipher to use.\n     *\/\n    public function __construct(\n        Key\\PublicKeyInterface $key,\n        EncryptionCipherInterface $cipher = null\n    ) {\n        if (null === $cipher) {\n            $cipher = new EncryptionCipher;\n        }\n\n        $this->key = $key;\n        $this->cipher = $cipher;\n    }\n\n    \/**\n     * Get the key.\n     *\n     * @return Key\\PublicKeyInterface The key.\n     *\/\n    public function key()\n    {\n        return $this->key;\n    }\n\n    \/**\n     * Get the cipher.\n     *\n     * @return EncryptionCipherInterface The cipher;\n     *\/\n    public function cipher()\n    {\n        return $this->cipher;\n    }\n\n    \/**\n     * Encrypt a data packet.\n     *\n     * @param string $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    public function encrypt($data)\n    {\n        return $this->cipher()->encrypt($this->key(), $data);\n    }\n\n    private $key;\n    private $cipher;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,2,2,null,6,6,6,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/BoundEncryptionCipherInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The interface implemented by ciphers that encrypt data and use a bound key.\n *\/\ninterface BoundEncryptionCipherInterface\n{\n    \/**\n     * Encrypt a data packet.\n     *\n     * @param string $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    public function encrypt($data);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Cipher.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The standard Lockbox bi-directional cipher.\n *\/\nclass Cipher implements EncryptionCipherInterface, DecryptionCipherInterface\n{\n    \/**\n     * Construct a new bi-directional encryption cipher.\n     *\n     * @param EncryptionCipherInterface|null $encryptionCipher The encryption cipher to use.\n     * @param DecryptionCipherInterface|null $decryptionCipher The decryption cipher to use.\n     *\/\n    public function __construct(\n        EncryptionCipherInterface $encryptionCipher = null,\n        DecryptionCipherInterface $decryptionCipher = null\n    ) {\n        if (null === $encryptionCipher) {\n            $encryptionCipher = new EncryptionCipher;\n        }\n        if (null === $decryptionCipher) {\n            $decryptionCipher = new DecryptionCipher;\n        }\n\n        $this->encryptionCipher = $encryptionCipher;\n        $this->decryptionCipher = $decryptionCipher;\n    }\n\n    \/**\n     * Get the encryption cipher.\n     *\n     * @return EncryptionCipherInterface The encryption cipher.\n     *\/\n    public function encryptionCipher()\n    {\n        return $this->encryptionCipher;\n    }\n\n    \/**\n     * Get the decryption cipher.\n     *\n     * @return DecryptionCipherInterface The decryption cipher.\n     *\/\n    public function decryptionCipher()\n    {\n        return $this->decryptionCipher;\n    }\n\n    \/**\n     * Encrypt a data packet.\n     *\n     * @param Key\\PublicKeyInterface $key  The key to encrypt with.\n     * @param string                 $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    public function encrypt(Key\\PublicKeyInterface $key, $data)\n    {\n        return $this->encryptionCipher()->encrypt($key, $data);\n    }\n\n    \/**\n     * Decrypt a data packet.\n     *\n     * @param Key\\PrivateKeyInterface $key  The key to decrypt with.\n     * @param string                  $data The data to decrypt.\n     *\n     * @return string                              The decrypted data.\n     * @throws Exception\\DecryptionFailedException If the decryption failed.\n     *\/\n    public function decrypt(Key\\PrivateKeyInterface $key, $data)\n    {\n        return $this->decryptionCipher()->decrypt($key, $data);\n    }\n\n    private $encryptionCipher;\n    private $decryptionCipher;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12,1,1,12,1,1,null,12,12,12,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,12,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,10,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/DecryptionCipher.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The standard Lockbox decryption cipher.\n *\/\nclass DecryptionCipher implements DecryptionCipherInterface\n{\n    \/**\n     * Decrypt a data packet.\n     *\n     * @param Key\\PrivateKeyInterface $key  The key to decrypt with.\n     * @param string                  $data The data to decrypt.\n     *\n     * @return string                              The decrypted data.\n     * @throws Exception\\DecryptionFailedException If the decryption failed.\n     *\/\n    public function decrypt(Key\\PrivateKeyInterface $key, $data)\n    {\n        try {\n            $data = $this->base64UriDecode($data);\n        } catch (Exception\\InvalidEncodingException $e) {\n            throw new Exception\\DecryptionFailedException($e);\n        }\n\n        $keyAndIv = substr($data, 0, $key->bits() \/ 8);\n        if (\n            !openssl_private_decrypt(\n                $keyAndIv,\n                $keyAndIv,\n                $key->handle(),\n                OPENSSL_PKCS1_OAEP_PADDING\n            )\n        ) {\n            throw new Exception\\DecryptionFailedException;\n        }\n\n        $generatedKey = substr($keyAndIv, 0, 32);\n        if (false === $generatedKey) {\n            throw new Exception\\DecryptionFailedException;\n        }\n\n        $iv = substr($keyAndIv, 32);\n        if (false === $iv) {\n            throw new Exception\\DecryptionFailedException;\n        }\n\n        $data = $this->decryptAes(\n            $generatedKey,\n            $iv,\n            substr($data, $key->bits() \/ 8)\n        );\n\n        $hash = substr($data, 0, 20);\n        $data = substr($data, 20);\n        if (false === $data) {\n            $data = '';\n        }\n\n        if (sha1($data, true) !== $hash) {\n            throw new Exception\\DecryptionFailedException;\n        }\n\n        return $data;\n    }\n\n    \/**\n     * Decrypt some data with AES and PKCS #7 padding.\n     *\n     * @param string $key  The key to use.\n     * @param string $iv   The initialization vector to use.\n     * @param string $data The data to decrypt.\n     *\n     * @return string The decrypted data.\n     *\/\n    protected function decryptAes($key, $iv, $data)\n    {\n        $data = mcrypt_decrypt(\n            MCRYPT_RIJNDAEL_128,\n            $key,\n            $data,\n            MCRYPT_MODE_CBC,\n            $iv\n        );\n\n        try {\n            $data = $this->unpad($data);\n        } catch (Exception\\InvalidPaddingException $e) {\n            throw new Exception\\DecryptionFailedException($e);\n        }\n\n        return $data;\n    }\n\n    \/**\n     * Remove PKCS #7 (RFC 2315) padding from a string.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc2315\n     *\n     * @param string $data The padded data.\n     *\n     * @return string                            The data with padding removed.\n     * @throws Exception\\InvalidPaddingException If the padding is invalid.\n     *\/\n    protected function unpad($data)\n    {\n        $padSize = ord(substr($data, -1));\n        $padding = substr($data, -$padSize);\n        if (str_repeat(chr($padSize), $padSize) !== $padding) {\n            throw new Exception\\InvalidPaddingException;\n        }\n\n        return substr($data, 0, -$padSize);\n    }\n\n    \/**\n     * Decode a string encoded using Base 64 encoding with URI and filename safe\n     * alphabet.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4648#section-5\n     *\n     * @param string $data The encoded data.\n     *\n     * @return string                             The decoded data.\n     * @throws Exception\\InvalidEncodingException If the encoding is invalid.\n     *\/\n    protected function base64UriDecode($data)\n    {\n        $data = base64_decode(\n            str_pad(\n                strtr($data, '-_', '+\/'),\n                strlen($data) % 4,\n                '=',\n                STR_PAD_RIGHT\n            ),\n            true\n        );\n        if (false === $data) {\n            throw new Exception\\InvalidEncodingException;\n        }\n\n        return $data;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,15,15,3,null,null,12,null,12,12,12,12,null,12,12,1,null,null,11,11,1,null,null,10,10,1,null,null,9,9,9,9,9,null,7,7,7,2,2,null,7,1,null,null,6,null,null,null,null,null,null,null,null,null,null,null,null,null,9,9,9,9,9,null,9,null,null,9,9,2,null,null,7,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9,9,9,2,null,null,7,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,15,15,15,15,15,null,15,null,15,15,3,null,null,12,null,null]},{"name":"Eloquent\/Lockbox\/DecryptionCipherInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The interface implemented by ciphers that decrypt data.\n *\/\ninterface DecryptionCipherInterface\n{\n    \/**\n     * Decrypt a data packet.\n     *\n     * @param Key\\PrivateKeyInterface $key  The key to decrypt with.\n     * @param string                  $data The data to decrypt.\n     *\n     * @return string                              The decrypted data.\n     * @throws Exception\\DecryptionFailedException If the decryption failed.\n     *\/\n    public function decrypt(Key\\PrivateKeyInterface $key, $data);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/EncryptionCipher.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The standard Lockbox encryption cipher.\n *\/\nclass EncryptionCipher implements EncryptionCipherInterface\n{\n    \/**\n     * Construct a new encryption cipher.\n     *\n     * @param integer|null $randomSource The random source to use.\n     *\/\n    public function __construct($randomSource = null)\n    {\n        if (null === $randomSource) {\n            $randomSource = MCRYPT_DEV_URANDOM;\n        }\n\n        $this->randomSource = $randomSource;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function randomSource()\n    {\n        return $this->randomSource;\n    }\n\n    \/**\n     * Encrypt a data packet.\n     *\n     * @param Key\\PublicKeyInterface $key  The key to encrypt with.\n     * @param string                 $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    public function encrypt(Key\\PublicKeyInterface $key, $data)\n    {\n        $generatedKey = $this->generateKey();\n        $iv = $this->generateIv();\n\n        openssl_public_encrypt(\n            $generatedKey . $iv,\n            $encryptedKeyAndIv,\n            $key->handle(),\n            OPENSSL_PKCS1_OAEP_PADDING\n        );\n\n        return $this->base64UriEncode(\n            $encryptedKeyAndIv .\n            $this->encryptAes($generatedKey, $iv, sha1($data, true) . $data)\n        );\n    }\n\n    \/**\n     * Generate an encryption key.\n     *\n     * @return string The encryption key.\n     *\/\n    protected function generateKey()\n    {\n        return mcrypt_create_iv(32, $this->randomSource());\n    }\n\n    \/**\n     * Generate an initialization vector.\n     *\n     * @return string The initialization vector.\n     *\/\n    protected function generateIv()\n    {\n        return mcrypt_create_iv(16, $this->randomSource());\n    }\n\n    \/**\n     * Encrypt some data with AES and PKCS #7 padding.\n     *\n     * @param string $key  The key to use.\n     * @param string $iv   The initialization vector to use.\n     * @param string $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    protected function encryptAes($key, $iv, $data)\n    {\n        return mcrypt_encrypt(\n            MCRYPT_RIJNDAEL_128,\n            $key,\n            $this->pad($data),\n            MCRYPT_MODE_CBC,\n            $iv\n        );\n    }\n\n    \/**\n     * Pad a string using PKCS #7 (RFC 2315) padding.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc2315\n     *\n     * @param string $data The data to pad.\n     *\n     * @return string The padded data.\n     *\/\n    protected function pad($data)\n    {\n        $padSize = intval(16 - (strlen($data) % 16));\n\n        return $data . str_repeat(chr($padSize), $padSize);\n    }\n\n    \/**\n     * Encode a string using Base 64 encoding with URI and filename safe\n     * alphabet.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4648#section-5\n     *\n     * @param string $data The data to encode.\n     *\n     * @return string The encoded data.\n     *\/\n    protected function base64UriEncode($data)\n    {\n        return rtrim(strtr(base64_encode($data), '+\/', '-_'), '=');\n    }\n\n    private $randomSource;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,22,22,null,22,22,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null,8,8,null,8,8,8,8,null,8,null,8,null,8,8,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null,null,8,8,8,8,8,null,8,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,8,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,null,null,null]},{"name":"Eloquent\/Lockbox\/EncryptionCipherInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox;\n\n\/**\n * The interface implemented by ciphers that encrypt data.\n *\/\ninterface EncryptionCipherInterface\n{\n    \/**\n     * Encrypt a data packet.\n     *\n     * @param Key\\PublicKeyInterface $key  The key to encrypt with.\n     * @param string                 $data The data to encrypt.\n     *\n     * @return string The encrypted data.\n     *\/\n    public function encrypt(Key\\PublicKeyInterface $key, $data);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Exception\/DecryptionFailedException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Exception;\n\nuse Exception;\n\n\/**\n * Decryption failed.\n *\/\nfinal class DecryptionFailedException extends Exception\n{\n    \/**\n     * Construct a new decryption failed exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('Decryption failed.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,null]},{"name":"Eloquent\/Lockbox\/Exception\/InvalidEncodingException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Exception;\n\nuse Exception;\n\n\/**\n * Invalid encoding was detected.\n *\/\nfinal class InvalidEncodingException extends Exception\n{\n    \/**\n     * Construct a new invalid encoding exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('Invalid encoding.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,null]},{"name":"Eloquent\/Lockbox\/Exception\/InvalidPaddingException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Exception;\n\nuse Exception;\n\n\/**\n * Invalid padding was detected.\n *\/\nfinal class InvalidPaddingException extends Exception\n{\n    \/**\n     * Construct a new invalid padding exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('Invalid padding.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null]},{"name":"Eloquent\/Lockbox\/Key\/AbstractKey.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * An abstract base class for implementing encryption keys.\n *\/\nabstract class AbstractKey implements KeyInterface\n{\n    \/**\n     * Construct a new encryption key.\n     *\n     * @param resource $handle The key handle.\n     *\/\n    public function __construct($handle)\n    {\n        $this->handle = $handle;\n        $this->details = openssl_pkey_get_details($handle);\n    }\n\n    public function __destruct()\n    {\n        openssl_free_key($this->handle());\n    }\n\n    \/**\n     * Get the key handle.\n     *\n     * @return resource The key handle.\n     *\/\n    public function handle()\n    {\n        return $this->handle;\n    }\n\n    \/**\n     * Get the number of bits.\n     *\n     * @return integer The number of bits.\n     *\/\n    public function bits()\n    {\n        return $this->detail('bits');\n    }\n\n    \/**\n     * Get a specific detail from the key details.\n     *\n     * @param string $name The name of the detail.\n     *\n     * @return mixed                            The value of the detail.\n     * @throws Exception\\MissingDetailException If the detail is not present.\n     *\/\n    protected function detail($name)\n    {\n        if (!array_key_exists($name, $this->details)) {\n            throw new Exception\\MissingDetailException($name);\n        }\n\n        return $this->details[$name];\n    }\n\n    private $handle;\n    private $details;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26,26,26,null,null,null,20,20,null,null,null,null,null,null,null,null,26,null,null,null,null,null,null,null,null,null,15,null,null,null,null,null,null,null,null,null,null,null,null,24,2,null,null,22,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/Exception\/InvalidKeyExceptionInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key\\Exception;\n\n\/**\n * The interface used to mark invalid key exceptions.\n *\/\ninterface InvalidKeyExceptionInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/Exception\/InvalidPrivateKeyException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key\\Exception;\n\nuse Exception;\n\n\/**\n * The supplied key is not a valid PEM formatted private key.\n *\/\nfinal class InvalidPrivateKeyException extends Exception implements\n    InvalidKeyExceptionInterface\n{\n    \/**\n     * Construct a new invalid private key exception.\n     *\n     * @param string         $key      The key.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($key, Exception $previous = null)\n    {\n        $this->key = $key;\n\n        parent::__construct(\n            'The supplied key is not a valid PEM formatted private key.',\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the key.\n     *\n     * @return string The key.\n     *\/\n    public function key()\n    {\n        return $this->key;\n    }\n\n    private $key;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/Exception\/InvalidPublicKeyException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key\\Exception;\n\nuse Exception;\n\n\/**\n * The supplied key is not a valid PEM formatted public key.\n *\/\nfinal class InvalidPublicKeyException extends Exception implements\n    InvalidKeyExceptionInterface\n{\n    \/**\n     * Construct a new invalid public key exception.\n     *\n     * @param string         $key      The key.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($key, Exception $previous = null)\n    {\n        $this->key = $key;\n\n        parent::__construct(\n            'The supplied key is not a valid PEM formatted public key.',\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the key.\n     *\n     * @return string The key.\n     *\/\n    public function key()\n    {\n        return $this->key;\n    }\n\n    private $key;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/Exception\/MissingDetailException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key\\Exception;\n\nuse Exception;\n\n\/**\n * The requested detail is not present.\n *\/\nfinal class MissingDetailException extends Exception\n{\n    \/**\n     * Construct a new missing detail exception.\n     *\n     * @param string         $name     The name of the requested detail.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($name, Exception $previous = null)\n    {\n        $this->name = $name;\n\n        parent::__construct(\n            sprintf('Missing key detail %s.', var_export($name, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the detail name.\n     *\n     * @return string The detail name.\n     *\/\n    public function name()\n    {\n        return $this->name;\n    }\n\n    private $name;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/Exception\/ReadException.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key\\Exception;\n\nuse Exception;\n\n\/**\n * Could not read from the specified path.\n *\/\nfinal class ReadException extends Exception\n{\n    \/**\n     * Construct a new read exception.\n     *\n     * @param string         $path     The unreadable path.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($path, Exception $previous = null)\n    {\n        $this->path = $path;\n\n        parent::__construct(\n            sprintf('Unable to read from %s.', var_export($path, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the path.\n     *\n     * @return string The path.\n     *\/\n    public function path()\n    {\n        return $this->path;\n    }\n\n    private $path;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/KeyFactory.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\nuse ErrorException;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Creates encryption keys.\n *\/\nclass KeyFactory implements KeyFactoryInterface\n{\n    \/**\n     * Construct a new key factory.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Create a new private key.\n     *\n     * @param string      $key      The PEM formatted private key.\n     * @param string|null $password The key password.\n     *\n     * @return PrivateKeyInterface\n     * @throws Exception\\InvalidPrivateKeyException If the key is invalid.\n     *\/\n    public function createPrivateKey($key, $password = null)\n    {\n        $handle = openssl_pkey_get_private($key, $password);\n        if (false === $handle) {\n            throw new Exception\\InvalidPrivateKeyException($key);\n        }\n\n        return new PrivateKey($handle);\n    }\n\n    \/**\n     * Create a new public key.\n     *\n     * @param string $key The PEM formatted public key.\n     *\n     * @return PublicKeyInterface\n     * @throws Exception\\InvalidPublicKeyException If the key is invalid.\n     *\/\n    public function createPublicKey($key)\n    {\n        $handle = openssl_pkey_get_public($key);\n        if (false === $handle) {\n            throw new Exception\\InvalidPublicKeyException($key);\n        }\n\n        return new PublicKey($handle);\n    }\n\n    \/**\n     * Create a new private key from a file.\n     *\n     * @param string      $path     The path to the PEM formatted private key.\n     * @param string|null $password The key password.\n     *\n     * @return PrivateKeyInterface\n     * @throws Exception\\ReadException              If the file cannot be read.\n     * @throws Exception\\InvalidPrivateKeyException If the key is invalid.\n     *\/\n    public function createPrivateKeyFromFile($path, $password = null)\n    {\n        try {\n            $key = $this->isolator->file_get_contents($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path);\n        }\n\n        return $this->createPrivateKey($key, $password);\n    }\n\n    \/**\n     * Create a new public key from a file.\n     *\n     * @param string $path The path to the PEM formatted public key.\n     *\n     * @return PublicKeyInterface\n     * @throws Exception\\ReadException             If the file cannot be read.\n     * @throws Exception\\InvalidPublicKeyException If the key is invalid.\n     *\/\n    public function createPublicKeyFromFile($path)\n    {\n        try {\n            $key = $this->isolator->file_get_contents($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path);\n        }\n\n        return $this->createPublicKey($key);\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20,20,null,null,null,null,null,null,null,null,null,null,null,null,15,15,1,null,null,14,null,null,null,null,null,null,null,null,null,null,null,null,17,17,1,null,null,16,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,13,13,1,null,null,12,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,1,null,null,1,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/KeyFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * The interface implemented by encryption key factories.\n *\/\ninterface KeyFactoryInterface\n{\n    \/**\n     * Create a new private key.\n     *\n     * @param string      $key      The PEM formatted private key.\n     * @param string|null $password The key password.\n     *\n     * @return PrivateKeyInterface\n     * @throws Exception\\InvalidPrivateKeyException If the key is invalid.\n     *\/\n    public function createPrivateKey($key, $password = null);\n\n    \/**\n     * Create a new public key.\n     *\n     * @param string $key The PEM formatted public key.\n     *\n     * @return PublicKeyInterface\n     * @throws Exception\\InvalidPublicKeyException If the key is invalid.\n     *\/\n    public function createPublicKey($key);\n\n    \/**\n     * Create a new private key from a file.\n     *\n     * @param string      $path     The path to the PEM formatted private key.\n     * @param string|null $password The key password.\n     *\n     * @return PrivateKeyInterface\n     * @throws Exception\\ReadException              If the file cannot be read.\n     * @throws Exception\\InvalidPrivateKeyException If the key is invalid.\n     *\/\n    public function createPrivateKeyFromFile($path, $password = null);\n\n    \/**\n     * Create a new public key from a file.\n     *\n     * @param string $path The path to the PEM formatted public key.\n     *\n     * @return PublicKeyInterface\n     * @throws Exception\\ReadException             If the file cannot be read.\n     * @throws Exception\\InvalidPublicKeyException If the key is invalid.\n     *\/\n    public function createPublicKeyFromFile($path);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/KeyInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * The interface implemented by encryption keys.\n *\/\ninterface KeyInterface\n{\n    \/**\n     * Get the number of bits.\n     *\n     * @return integer The number of bits.\n     *\/\n    public function bits();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/PrivateKey.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * Represents a private encryption key.\n *\/\nclass PrivateKey extends AbstractKey implements PrivateKeyInterface\n{\n    \/**\n     * Get the public key for this private key.\n     *\n     * @param KeyFactoryInterface|null $factory The key factory to use.\n     *\n     * @return PublicKeyInterface The public key.\n     *\/\n    public function publicKey(KeyFactoryInterface $factory = null)\n    {\n        if (null === $factory) {\n            $factory = new KeyFactory;\n        }\n\n        return $factory->createPublicKey($this->detail('key'));\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,16,16,null,16,null,null]},{"name":"Eloquent\/Lockbox\/Key\/PrivateKeyInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * The interface implemented by private encryption keys.\n *\/\ninterface PrivateKeyInterface extends KeyInterface\n{\n    \/**\n     * Get the public key for this private key.\n     *\n     * @param KeyFactoryInterface|null $factory The key factory to use.\n     *\n     * @return PublicKeyInterface The public key.\n     *\/\n    public function publicKey(KeyFactoryInterface $factory = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Lockbox\/Key\/PublicKey.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * Represents a public encryption key.\n *\/\nclass PublicKey extends AbstractKey implements PublicKeyInterface\n{\n    \/**\n     * Get the string representation of this key.\n     *\n     * @return string The string representation.\n     *\/\n    public function string()\n    {\n        return $this->detail('key');\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,null]},{"name":"Eloquent\/Lockbox\/Key\/PublicKeyInterface.php","source":"<?php\n\n\/*\n * This file is part of the Lockbox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Lockbox\\Key;\n\n\/**\n * The interface implemented by public encryption keys.\n *\/\ninterface PublicKeyInterface extends KeyInterface\n{\n    \/**\n     * Get the string representation of this key.\n     *\n     * @return string The string representation.\n     *\/\n    public function string();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}